/*
 * SwitchboardView.java
 *
 * Created on August 14, 2006, 11:45 PM
 */

package com.floreantpos.ui.views;

import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Set;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

import net.miginfocom.swing.MigLayout;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.LogFactory;

import com.floreantpos.ITicketList;
import com.floreantpos.Messages;
import com.floreantpos.POSConstants;
import com.floreantpos.PosException;
import com.floreantpos.actions.AuthorizeTicketAction;
import com.floreantpos.actions.NewBarTabAction;
import com.floreantpos.actions.OpenKitchenDisplayAction;
import com.floreantpos.actions.RefundAction;
import com.floreantpos.actions.SettleTicketAction;
import com.floreantpos.actions.ShutDownAction;
import com.floreantpos.actions.TicketImportAction;
import com.floreantpos.bo.ui.BackOfficeWindow;
import com.floreantpos.config.TerminalConfig;
import com.floreantpos.demo.KitchenDisplayWindow;
import com.floreantpos.extension.FloorLayoutPlugin;
import com.floreantpos.extension.OrderServiceExtension;
import com.floreantpos.extension.TicketImportPlugin;
import com.floreantpos.main.Application;
import com.floreantpos.model.AttendenceHistory;
import com.floreantpos.model.OrderType;
import com.floreantpos.model.OrderTypeProperties;
import com.floreantpos.model.Shift;
import com.floreantpos.model.Ticket;
import com.floreantpos.model.User;
import com.floreantpos.model.UserPermission;
import com.floreantpos.model.UserType;
import com.floreantpos.model.dao.AttendenceHistoryDAO;
import com.floreantpos.model.dao.TicketDAO;
import com.floreantpos.services.TicketService;
import com.floreantpos.swing.PosButton;
import com.floreantpos.ui.dialog.ManagerDialog;
import com.floreantpos.ui.dialog.NumberSelectionDialog2;
import com.floreantpos.ui.dialog.POSMessageDialog;
import com.floreantpos.ui.dialog.PayoutDialog;
import com.floreantpos.ui.dialog.VoidTicketDialog;
import com.floreantpos.ui.views.order.DefaultOrderServiceExtension;
import com.floreantpos.ui.views.order.OrderController;
import com.floreantpos.ui.views.order.OrderView;
import com.floreantpos.ui.views.order.RootView;
import com.floreantpos.ui.views.payment.SettleTicketDialog;
import com.floreantpos.util.POSUtil;
import com.floreantpos.util.PosGuiUtil;
import com.floreantpos.util.TicketAlreadyExistsException;

/**
 * 
 * @author MShahriar
 */
public class SwitchboardView extends JPanel implements ActionListener, ITicketList {
	private final AutoLogoffHandler logoffHandler = new AutoLogoffHandler();

	public final static String VIEW_NAME = com.floreantpos.POSConstants.SWITCHBOARD;

	private OrderServiceExtension orderServiceExtension;

	private static SwitchboardView instance;

	private Timer autoLogoffTimer = new Timer(1000, logoffHandler);

	//private Timer ticketListUpdateTimer = new Timer(10 * 1000, new TicketListUpdaterTask());

	/** Creates new form SwitchboardView */
	public SwitchboardView() {
		initComponents();
		
		btnNewTicket.addActionListener(this);
		btnTakeout.addActionListener(this);
		btnPickup.addActionListener(this);
		btnHomeDelivery.addActionListener(this);
		btnDriveThrough.addActionListener(this);
		btnBarTab.addActionListener(this);

		btnBackOffice.addActionListener(this);
		btnClockOut.addActionListener(this);
		btnEditTicket.addActionListener(this);
		btnGroupSettle.addActionListener(this);
		btnLogout.addActionListener(this);
		btnManager.addActionListener(this);
		btnPayout.addActionListener(this);
		btnOrderInfo.addActionListener(this);
		btnReopenTicket.addActionListener(this);
		btnSettleTicket.addActionListener(this);
		btnSplitTicket.addActionListener(this);
		btnVoidTicket.addActionListener(this);

		orderServiceExtension = Application.getPluginManager().getPlugin(OrderServiceExtension.class);

		if (orderServiceExtension == null) {
			btnHomeDelivery.setEnabled(false);
			btnPickup.setEnabled(false);
			btnDriveThrough.setEnabled(false);
			btnAssignDriver.setEnabled(false);

			orderServiceExtension = new DefaultOrderServiceExtension();
		}

		applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));

		instance = this;
	}

	public static SwitchboardView getInstance() {
		return instance;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
	// <editor-fold defaultstate="collapsed"
	// desc=" Generated Code ">//GEN-BEGIN:initComponents
	private void initComponents() {
		JPanel activityPanel = new JPanel();

		lblUserName = new javax.swing.JLabel();
		javax.swing.JPanel bottomPanel = new javax.swing.JPanel();
		javax.swing.JPanel bottomLeftPanel = new javax.swing.JPanel();
		openTicketList = new com.floreantpos.ui.TicketListView();

		btnNewTicket = new PosButton();
		btnTakeout = new PosButton();
		btnPickup = new PosButton();
		btnHomeDelivery = new PosButton();
		btnDriveThrough = new PosButton();
		btnBarTab = new PosButton();
		btnEditTicket = new PosButton();
		btnVoidTicket = new PosButton();
		btnRefundTicket = new PosButton(new RefundAction(this));
		btnPayout = new PosButton();
		btnOrderInfo = new PosButton();
		javax.swing.JPanel bottomRightPanel = new javax.swing.JPanel();
		btnShutdown = new PosButton(new ShutDownAction());
		btnLogout = new PosButton();
		btnBackOffice = new PosButton();
		btnManager = new PosButton();
		btnAuthorize = new PosButton(new AuthorizeTicketAction());
		btnKitchenDisplay = new PosButton(new OpenKitchenDisplayAction());
		btnClockOut = new PosButton();

		setLayout(new java.awt.BorderLayout(10, 10));

		createHeaderPanel();

		bottomPanel.setLayout(new java.awt.BorderLayout(5, 5));

		bottomLeftPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, POSConstants.OPEN_TICKETS_AND_ACTIVITY,
				javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
		bottomLeftPanel.setLayout(new java.awt.BorderLayout(5, 5));
		bottomLeftPanel.add(openTicketList, java.awt.BorderLayout.CENTER);

		activityPanel.setLayout(new java.awt.GridLayout(3, 0, 5, 5));

		activityPanel.add(btnNewTicket);
		activityPanel.add(btnTakeout);
		activityPanel.add(btnPickup);
		activityPanel.add(btnHomeDelivery);
		activityPanel.add(btnDriveThrough);
		activityPanel.add(btnBarTab);
		
		setupOrderTypes();

		btnEditTicket.setText(POSConstants.CAPITAL_EDIT);
		activityPanel.add(btnEditTicket);

		btnSettleTicket = new PosButton();
		btnSettleTicket.setText(POSConstants.CAPITAL_SETTLE);
		activityPanel.add(btnSettleTicket);
		btnGroupSettle = new PosButton();

		btnGroupSettle.setText("<html><body>" + POSConstants.CAPITAL_GROUP + "<br>" + POSConstants.CAPITAL_SETTLE + "</body></html>");
		activityPanel.add(btnGroupSettle);
		btnSplitTicket = new PosButton();

		btnSplitTicket.setText(POSConstants.CAPITAL_SPLIT);
		activityPanel.add(btnSplitTicket);
		btnReopenTicket = new PosButton();

		btnReopenTicket.setText(POSConstants.CAPITAL_RE_OPEN);
		activityPanel.add(btnReopenTicket);

		btnVoidTicket.setText(POSConstants.CAPITAL_VOID);
		activityPanel.add(btnVoidTicket);

		activityPanel.add(btnRefundTicket);

		btnPayout.setText(POSConstants.CAPITAL_PAY_OUT);
		activityPanel.add(btnPayout);

		btnOrderInfo.setText(POSConstants.ORDER_INFO);
		activityPanel.add(btnOrderInfo);

		bottomLeftPanel.add(activityPanel, java.awt.BorderLayout.SOUTH);

		btnAssignDriver = new PosButton();
		btnAssignDriver.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				doAssignDriver();
			}
		});
		btnAssignDriver.setText("<html>ASSIGN<br/>DRIVER</html>");
		activityPanel.add(btnAssignDriver);

		btnCloseOrder = new PosButton();
		btnCloseOrder.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				doCloseOrder();
			}
		});
		btnCloseOrder.setText("CLOSE ORDER");
		activityPanel.add(btnCloseOrder);

		bottomPanel.add(bottomLeftPanel, java.awt.BorderLayout.CENTER);

		bottomRightPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "OTHERS", javax.swing.border.TitledBorder.CENTER,
				javax.swing.border.TitledBorder.DEFAULT_POSITION));

		btnLogout.setText(POSConstants.CAPITAL_LOGOUT);

		btnBackOffice.setText(POSConstants.CAPITAL_BACK_OFFICE);

		btnManager.setText(POSConstants.CAPITAL_MANAGER);

		btnClockOut.setText(POSConstants.CAPITAL_CLOCK_OUT);

		bottomPanel.add(bottomRightPanel, java.awt.BorderLayout.EAST);
		bottomRightPanel.setLayout(new MigLayout("aligny bottom, insets 1 2 1 2, gapy 10", "[140px]", "[][][][][]"));

		final FloorLayoutPlugin floorLayoutPlugin = Application.getPluginManager().getPlugin(FloorLayoutPlugin.class);
		if (floorLayoutPlugin != null) {
			PosButton btnTicketsAndTables = new PosButton("TICKETS & TABLES");
			btnTicketsAndTables.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					floorLayoutPlugin.openTicketsAndTablesDisplay();
				}
			});

			bottomRightPanel.add(btnTicketsAndTables, "height pref!,grow,wrap");
		}

		bottomRightPanel.add(btnAuthorize, "height pref!,grow,wrap");
		bottomRightPanel.add(btnKitchenDisplay, "height pref!,grow,wrap");
		bottomRightPanel.add(btnManager, "height pref!,grow,wrap");
		bottomRightPanel.add(btnBackOffice, "height pref!,grow,wrap");

		TicketImportPlugin ticketImportPlugin = Application.getPluginManager().getPlugin(TicketImportPlugin.class);
		if (ticketImportPlugin != null) {
			bottomRightPanel.add(new PosButton(new TicketImportAction()), "height pref!,grow,wrap");
		}

		bottomRightPanel.add(btnClockOut, "height pref!,grow,wrap");
		bottomRightPanel.add(btnLogout, "height pref!,grow,wrap");
		bottomRightPanel.add(btnShutdown, "height pref!,grow,wrap");

		add(bottomPanel, java.awt.BorderLayout.CENTER);
	}// </editor-fold>//GEN-END:initComponents

	private void setupOrderTypes() {
		setupOrderType(OrderType.DINE_IN, btnNewTicket, OrderType.DINE_IN.name());
		setupOrderType(OrderType.TAKE_OUT, btnTakeout, OrderType.TAKE_OUT.name());
		setupOrderType(OrderType.PICKUP, btnPickup, OrderType.PICKUP.name());
		setupOrderType(OrderType.HOME_DELIVERY, btnHomeDelivery, OrderType.HOME_DELIVERY.name());
		setupOrderType(OrderType.DRIVE_THRU, btnDriveThrough, OrderType.DRIVE_THRU.name());
		setupOrderType(OrderType.BAR_TAB, btnBarTab, OrderType.BAR_TAB.name());
	}
	
	private void setupOrderType(OrderType orderType, JButton button, String textKey) {
		OrderTypeProperties properties = orderType.getProperties();

		if (properties != null && properties.isVisible()) {
			if (StringUtils.isNotEmpty(properties.getAlias())) {
				button.setText(properties.getAlias());
			}
			else {
				button.setText(Messages.getString(textKey));
			}

			button.setVisible(true);
		}
		else {
			button.setVisible(false);
		}
	}

	private void createHeaderPanel() {
		JPanel statusPanel = new JPanel(new MigLayout("fill", "[fill, grow 100][]", ""));
		statusPanel.setPreferredSize(new Dimension(80, 60));
		java.awt.Font headerFont = new java.awt.Font("Dialog", Font.BOLD, 12);

		lblUserName.setFont(headerFont);
		statusPanel.add(lblUserName);

		timerLabel.setHorizontalAlignment(JLabel.RIGHT);
		timerLabel.setFont(headerFont);
		statusPanel.add(timerLabel);

		PosButton btnRefrestTickets = new PosButton("REFRESH TICKET LIST");
		btnRefrestTickets.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				updateTicketList();
			}
		});

		statusPanel.add(btnRefrestTickets);

		add(statusPanel, java.awt.BorderLayout.NORTH);
	}

	protected void doCloseOrder() {
		Ticket ticket = getFirstSelectedTicket();

		int due = (int) POSUtil.getDouble(ticket.getDueAmount());
		if (due != 0) {
			POSMessageDialog.showError("Ticket is not fully paid");
			return;
		}

		int option = JOptionPane.showOptionDialog(Application.getPosWindow(), "Ticket# " + ticket.getId() + " will be closed.", "Confirm",
				JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);

		if (option != JOptionPane.OK_OPTION) {
			return;
		}

		OrderController.closeOrder(ticket);

		updateTicketList();
	}

	protected void doAssignDriver() {
		try {

			Ticket ticket = getFirstSelectedTicket();

			if (ticket == null) {
				return;
			}

			if (ticket.getType() != OrderType.HOME_DELIVERY) {
				POSMessageDialog.showError("Driver can be assigned only for Home Delivery");
				return;
			}

			User assignedDriver = ticket.getAssignedDriver();
			if (assignedDriver != null) {
				int option = JOptionPane.showOptionDialog(Application.getPosWindow(), "Driver already assigned. Do you want to reassign?", "Confirm",
						JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);

				if (option != JOptionPane.YES_OPTION) {
					return;
				}
			}

			orderServiceExtension.assignDriver(ticket.getId());
		} catch (Exception e) {
			e.printStackTrace();
			POSMessageDialog.showError(e.getMessage());
			LogFactory.getLog(SwitchboardView.class).error(e);
		}
	}

	private void doReopenTicket() {
		try {

			int ticketId = NumberSelectionDialog2.takeIntInput("Enter or scan ticket id");

			if (ticketId == -1) {
				return;
			}

			Ticket ticket = TicketDAO.getInstance().loadFullTicket(ticketId);

			if (ticket == null) {
				throw new PosException(POSConstants.NO_TICKET_WITH_ID + " " + ticketId + " " + POSConstants.FOUND);
			}

			if (!ticket.isClosed()) {
				throw new PosException(POSConstants.TICKET_IS_NOT_CLOSED);
			}

			if (ticket.isVoided()) {
				throw new PosException("Void ticket cannot be reopened");
			}

			ticket.setClosed(false);
			ticket.setClosingDate(null);
			ticket.setReOpened(true);

			TicketDAO.getInstance().saveOrUpdate(ticket);

			OrderInfoView view = new OrderInfoView(Arrays.asList(ticket));
			OrderInfoDialog dialog = new OrderInfoDialog(view);
			dialog.setSize(400, 600);
			dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			dialog.setLocationRelativeTo(Application.getPosWindow());
			dialog.setVisible(true);

			updateTicketList();

		} catch (PosException e) {
			POSMessageDialog.showError(this, e.getLocalizedMessage());
		} catch (Exception e) {
			POSMessageDialog.showError(this, POSConstants.ERROR_MESSAGE, e);
		}
	}

	private void doClockOut() {
		int option = JOptionPane.showOptionDialog(this, POSConstants.CONFIRM_CLOCK_OUT, POSConstants.CONFIRM, JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE, null, null, null);
		if (option != JOptionPane.YES_OPTION) {
			return;
		}

		User user = Application.getCurrentUser();
		AttendenceHistoryDAO attendenceHistoryDAO = new AttendenceHistoryDAO();
		AttendenceHistory attendenceHistory = attendenceHistoryDAO.findHistoryByClockedInTime(user);
		if (attendenceHistory == null) {
			attendenceHistory = new AttendenceHistory();
			Date lastClockInTime = user.getLastClockInTime();
			Calendar c = Calendar.getInstance();
			c.setTime(lastClockInTime);
			attendenceHistory.setClockInTime(lastClockInTime);
			attendenceHistory.setClockInHour(Short.valueOf((short) c.get(Calendar.HOUR)));
			attendenceHistory.setUser(user);
			attendenceHistory.setTerminal(Application.getInstance().getTerminal());
			attendenceHistory.setShift(user.getCurrentShift());
		}

		Shift shift = user.getCurrentShift();
		Calendar calendar = Calendar.getInstance();

		user.doClockOut(attendenceHistory, shift, calendar);

		Application.getInstance().logout();
	}

	private synchronized void doShowBackoffice() {
		BackOfficeWindow window = BackOfficeWindow.getInstance();
		if (window == null) {
			window = new BackOfficeWindow();
			Application.getInstance().setBackOfficeWindow(window);
		}
		window.setVisible(true);
		window.toFront();
	}

	private void doLogout() {
		BackOfficeWindow.getInstance().dispose();
		Window[] windows = Window.getWindows();
		for (Window window : windows) {
			if (window instanceof KitchenDisplayWindow) {
				window.dispose();
			}
		}
		Application.getInstance().logout();
	}

	private void doSettleTicket() {
		try {
			Ticket ticket = null;

			List<Ticket> selectedTickets = openTicketList.getSelectedTickets();

			if (selectedTickets.size() > 0) {
				ticket = selectedTickets.get(0);
			}
			else {
				int ticketId = NumberSelectionDialog2.takeIntInput("Enter or scan ticket id");
				ticket = TicketService.getTicket(ticketId);
			}

			new SettleTicketAction(ticket.getId()).execute();

			updateTicketList();

		} catch (PosException e) {
			POSMessageDialog.showError(this, e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			POSMessageDialog.showError(POSConstants.ERROR_MESSAGE, e);
		}
	}

	private void doShowOrderInfo() {
		doShowOrderInfo(openTicketList.getSelectedTickets());
	}

	private void doShowOrderInfo(List<Ticket> tickets) {
		try {

			if (tickets.size() == 0) {
				POSMessageDialog.showMessage(POSConstants.SELECT_ONE_TICKET_TO_PRINT);
				return;
			}

			List<Ticket> ticketsToShow = new ArrayList<Ticket>();

			for (int i = 0; i < tickets.size(); i++) {
				Ticket ticket = tickets.get(i);
				ticketsToShow.add(TicketDAO.getInstance().loadFullTicket(ticket.getId()));
			}

			OrderInfoView view = new OrderInfoView(ticketsToShow);
			OrderInfoDialog dialog = new OrderInfoDialog(view);
			dialog.setSize(400, 600);
			dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			dialog.setLocationRelativeTo(Application.getPosWindow());
			dialog.setVisible(true);

		} catch (Exception e) {
			POSMessageDialog.showError(POSConstants.ERROR_MESSAGE, e);
		}
	}

	private void doVoidTicket() {
		try {
			Ticket ticket = null;

			List<Ticket> selectedTickets = openTicketList.getSelectedTickets();

			if (selectedTickets.size() > 0) {
				ticket = selectedTickets.get(0);
			}
			else {
				int ticketId = NumberSelectionDialog2.takeIntInput("Enter or scan ticket id");
				ticket = TicketService.getTicket(ticketId);
			}

			Ticket ticketToVoid = TicketDAO.getInstance().loadFullTicket(ticket.getId());

			VoidTicketDialog voidTicketDialog = new VoidTicketDialog(Application.getPosWindow(), true);
			voidTicketDialog.setTicket(ticketToVoid);
			voidTicketDialog.open();

			if (!voidTicketDialog.isCanceled()) {
				updateView();
			}
		} catch (PosException e) {
			POSMessageDialog.showError(this, e.getMessage());
		} catch (Exception e) {
			POSMessageDialog.showError(POSConstants.ERROR_MESSAGE, e);
		}
	}

	private void doSplitTicket() {
		try {
			Ticket selectedTicket = getFirstSelectedTicket();

			if (selectedTicket == null) {
				return;
			}

			// initialize the ticket.
			Ticket ticket = TicketDAO.getInstance().loadFullTicket(selectedTicket.getId());

			SplitTicketDialog dialog = new SplitTicketDialog();
			dialog.setTicket(ticket);
			dialog.open();

			updateView();
		} catch (Exception e) {
			POSMessageDialog.showError(POSConstants.ERROR_MESSAGE, e);
		}
	}

	private void doEditTicket() {
		try {
			Ticket ticket = null;

			List<Ticket> selectedTickets = openTicketList.getSelectedTickets();

			if (selectedTickets.size() > 0) {
				ticket = selectedTickets.get(0);
			}
			else {
				int ticketId = NumberSelectionDialog2.takeIntInput("Enter or scan ticket id");
				ticket = TicketService.getTicket(ticketId);
			}

			editTicket(ticket);
		} catch (PosException e) {
			POSMessageDialog.showError(this, e.getMessage());
		} catch (Exception e) {
			POSMessageDialog.showError(this, e.getMessage(), e);
		}
	}

	private void editTicket(Ticket ticket) {
		if (ticket.isPaid()) {
			POSMessageDialog.showMessage("Paid ticket cannot be edited");
			return;
		}

		Ticket ticketToEdit = TicketDAO.getInstance().loadFullTicket(ticket.getId());
		OrderView.getInstance().setCurrentTicket(ticketToEdit);

		RootView.getInstance().showView(OrderView.VIEW_NAME);
	}

	private void doCreateNewTicket(final OrderType ticketType) {
		try {
			OrderServiceExtension orderService = new DefaultOrderServiceExtension();
			orderService.createNewTicket(ticketType);

		} catch (TicketAlreadyExistsException e) {

			int option = JOptionPane.showOptionDialog(Application.getPosWindow(), POSConstants.EDIT_TICKET_CONFIRMATION, POSConstants.CONFIRM,
					JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
			if (option == JOptionPane.YES_OPTION) {
				editTicket(e.getTicket());
				return;
			}
		}
	}

	protected void doHomeDelivery(OrderType ticketType) {
		try {

			orderServiceExtension.createNewTicket(ticketType);

		} catch (TicketAlreadyExistsException e) {

			int option = JOptionPane.showOptionDialog(Application.getPosWindow(), POSConstants.EDIT_TICKET_CONFIRMATION, POSConstants.CONFIRM,
					JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
			if (option == JOptionPane.YES_OPTION) {
				editTicket(e.getTicket());
				return;
			}
		}
	}

	public static void doTakeout(OrderType titcketType) {
		Application application = Application.getInstance();

		Ticket ticket = new Ticket();
		ticket.setPriceIncludesTax(application.isPriceIncludesTax());
		//ticket.setTableNumber(-1);
		ticket.setType(titcketType);
		ticket.setTerminal(application.getTerminal());
		ticket.setOwner(Application.getCurrentUser());
		ticket.setShift(application.getCurrentShift());

		Calendar currentTime = Calendar.getInstance();
		ticket.setCreateDate(currentTime.getTime());
		ticket.setCreationHour(currentTime.get(Calendar.HOUR_OF_DAY));

		OrderView.getInstance().setCurrentTicket(ticket);
		RootView.getInstance().showView(OrderView.VIEW_NAME);
	}

	private void doPayout() {
		PayoutDialog dialog = new PayoutDialog(Application.getPosWindow(), true);
		dialog.open();
	}

	private void doShowManagerWindow() {
		ManagerDialog dialog = new ManagerDialog();
		dialog.open();

		updateTicketList();
	}

	private void doGroupSettle() {
		List<Ticket> selectedTickets = openTicketList.getSelectedTickets();
		if (selectedTickets == null) {
			return;
		}

		for (int i = 0; i < selectedTickets.size(); i++) {
			Ticket ticket = selectedTickets.get(i);

			Ticket fullTicket = TicketDAO.getInstance().loadFullTicket(ticket.getId());

			SettleTicketDialog posDialog = new SettleTicketDialog();
			posDialog.setTicket(fullTicket);
			posDialog.setSize(800, 700);
			posDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			posDialog.open();
		}

		updateTicketList();
	}

	public void updateView() {
		setupOrderTypes();
		
		User user = Application.getCurrentUser();
		UserType userType = user.getType();
		if (userType != null) {
			Set<UserPermission> permissions = userType.getPermissions();
			if (permissions != null) {
				btnNewTicket.setEnabled(false);
				btnBackOffice.setEnabled(false);
				btnEditTicket.setEnabled(false);
				btnGroupSettle.setEnabled(false);
				btnManager.setEnabled(false);
				btnPayout.setEnabled(false);
				btnReopenTicket.setEnabled(false);
				btnSettleTicket.setEnabled(false);
				btnSplitTicket.setEnabled(false);
				btnTakeout.setEnabled(false);
				btnVoidTicket.setEnabled(false);

				for (UserPermission permission : permissions) {
					if (permission.equals(UserPermission.VOID_TICKET)) {
						btnVoidTicket.setEnabled(true);
					}
					else if (permission.equals(UserPermission.PAY_OUT)) {
						btnPayout.setEnabled(true);
					}
					else if (permission.equals(UserPermission.SETTLE_TICKET)) {
						btnSettleTicket.setEnabled(true);
						btnGroupSettle.setEnabled(true);
					}
					else if (permission.equals(UserPermission.REOPEN_TICKET)) {
						btnReopenTicket.setEnabled(true);
					}
					else if (permission.equals(UserPermission.PERFORM_MANAGER_TASK)) {
						btnManager.setEnabled(true);
					}
					else if (permission.equals(UserPermission.SPLIT_TICKET)) {
						btnSplitTicket.setEnabled(true);
					}
					else if (permission.equals(UserPermission.TAKE_OUT)) {
						btnTakeout.setEnabled(true);
					}
					else if (permission.equals(UserPermission.VIEW_BACK_OFFICE)) {
						btnBackOffice.setEnabled(true);
					}
					else if (permission.equals(UserPermission.PAY_OUT)) {
						btnPayout.setEnabled(true);
					}
					else if (permission.equals(UserPermission.EDIT_TICKET)) {
						btnEditTicket.setEnabled(true);
					}
					else if (permission.equals(UserPermission.CREATE_TICKET)) {
						btnNewTicket.setEnabled(true);
					}
				}
			}
		}

		updateTicketList();
	}

	public synchronized void updateTicketList() {
		try {
			//ticketListUpdateTimer.stop();
			Application.getPosWindow().setGlassPaneVisible(true);

			User user = Application.getCurrentUser();

			TicketDAO dao = TicketDAO.getInstance();
			List<Ticket> openTickets = null;

			if (user.canViewAllOpenTickets()) {
				openTickets = dao.findOpenTickets();
			}
			else {
				openTickets = dao.findOpenTicketsForUser(user);
			}
			openTicketList.setTickets(openTickets);

			lblUserName.setText(POSConstants.WELCOME + " " + user.toString() + ". " + POSConstants.YOU + " " + POSConstants.HAVE + " " + openTickets.size()
					+ " " + POSConstants.OPEN.toLowerCase() + " " + POSConstants.TICKETS);
		} catch (Exception e) {
			POSMessageDialog.showError(this, "Error getting open ticket list", e);
		} finally {
			Application.getPosWindow().setGlassPaneVisible(false);
			//ticketListUpdateTimer.restart();
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private PosButton btnBackOffice;
	private PosButton btnClockOut;
	private PosButton btnEditTicket;
	private PosButton btnGroupSettle;
	private PosButton btnLogout;
	private PosButton btnManager;
	private PosButton btnAuthorize;
	private PosButton btnKitchenDisplay;
	private PosButton btnNewTicket;
	private PosButton btnPayout;
	private PosButton btnOrderInfo;
	private PosButton btnReopenTicket;
	private PosButton btnSettleTicket;
	private PosButton btnShutdown;
	private PosButton btnSplitTicket;
	private PosButton btnTakeout;
	private PosButton btnVoidTicket;
	private PosButton btnRefundTicket;
	private PosButton btnBarTab;
	private javax.swing.JLabel lblUserName;
	private com.floreantpos.ui.TicketListView openTicketList;
	private PosButton btnPickup;
	private PosButton btnHomeDelivery;
	private PosButton btnDriveThrough;
	private PosButton btnAssignDriver;
	private PosButton btnCloseOrder;
	private JLabel timerLabel = new JLabel();

	// End of variables declaration//GEN-END:variables

	@Override
	public void setVisible(boolean visible) {
		super.setVisible(visible);

		if (visible) {
			updateView();

			logoffHandler.reset();
			if (TerminalConfig.isAutoLogoffEnable()) {
				autoLogoffTimer.start();
			}
		}
		else {
			//ticketListUpdateTimer.stop();
			autoLogoffTimer.stop();
		}
	}

	public void actionPerformed(ActionEvent e) {
		Object source = e.getSource();
		
		if(source == btnNewTicket) {
			doCreateNewTicket(OrderType.DINE_IN);
		}
		else if(source == btnTakeout) {
			doTakeout(OrderType.TAKE_OUT);
		}
		else if(source == btnPickup) {
			doHomeDelivery(OrderType.PICKUP);
		}
		else if(source == btnHomeDelivery) {
			doHomeDelivery(OrderType.HOME_DELIVERY);
		}
		else if(source == btnDriveThrough) {
			doTakeout(OrderType.DRIVE_THRU);
		}
		else if(source == btnBarTab) {
			new NewBarTabAction(this).actionPerformed(e);
		}
		else if (source == btnBackOffice) {
			doShowBackoffice();
		}
		else if (source == btnClockOut) {
			doClockOut();
		}
		else if (source == btnEditTicket) {
			doEditTicket();
		}
		else if (source == btnGroupSettle) {
			doGroupSettle();
		}
		else if (source == btnLogout) {
			doLogout();
		}
		else if (source == btnManager) {
			doShowManagerWindow();
		}
		else if (source == btnPayout) {
			doPayout();
		}
		else if (source == btnOrderInfo) {
			doShowOrderInfo();
		}
		else if (source == btnReopenTicket) {
			doReopenTicket();
		}
		else if (source == btnSettleTicket) {
			doSettleTicket();
		}
		else if (source == btnSplitTicket) {
			doSplitTicket();
		}
		else if (source == btnVoidTicket) {
			doVoidTicket();
		}
	}

	public Ticket getFirstSelectedTicket() {
		List<Ticket> selectedTickets = openTicketList.getSelectedTickets();

		if (selectedTickets.size() == 0 || selectedTickets.size() > 1) {
			POSMessageDialog.showMessage("Please select a ticket");
			return null;
		}

		Ticket ticket = selectedTickets.get(0);

		return ticket;
	}

	public Ticket getSelectedTicket() {
		List<Ticket> selectedTickets = openTicketList.getSelectedTickets();

		if (selectedTickets.size() == 0 || selectedTickets.size() > 1) {
			return null;
		}

		Ticket ticket = selectedTickets.get(0);

		return ticket;
	}

	private class TicketListUpdaterTask implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			updateTicketList();
		}
	}

	private class AutoLogoffHandler implements ActionListener {
		int countDown = TerminalConfig.getAutoLogoffTime();

		@Override
		public void actionPerformed(ActionEvent e) {
			if (PosGuiUtil.isModalDialogShowing()) {
				reset();
				return;
			}

			--countDown;
			int min = countDown / 60;
			int sec = countDown % 60;

			timerLabel.setText("Aoto logoff in " + min + ":" + sec);

			if (countDown == 0) {
				doLogout();
			}
		}

		public void reset() {
			timerLabel.setText("");
			countDown = TerminalConfig.getAutoLogoffTime();
		}

	}
}
